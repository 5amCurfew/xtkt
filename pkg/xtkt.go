package xtkt

import (
	"os"
	"reflect"

	lib "github.com/5amCurfew/xtkt/lib"
	util "github.com/5amCurfew/xtkt/util"
)

func ParseResponse(config util.Config) {
	/////////////////////////////////////////////////////////////
	// GENERATE RECORDS
	/////////////////////////////////////////////////////////////
	records := lib.GenerateRecords(config)

	/////////////////////////////////////////////////////////////
	// GENERATE BOOKMARK (if required)
	/////////////////////////////////////////////////////////////
	if lib.BookmarkSet(config) {
		if _, err := os.Stat("state.json"); os.IsNotExist(err) {
			lib.CreateBookmark(config)
		}
	}

	/////////////////////////////////////////////////////////////
	// GENERATE SCHEMA Message
	/////////////////////////////////////////////////////////////
	lib.GenerateSchemaMessage(records, config)

	/////////////////////////////////////////////////////////////
	// GENERATE RECORD Message(s)
	/////////////////////////////////////////////////////////////
	lib.GenerateRecordMessages(records, config)

	/////////////////////////////////////////////////////////////
	// GENERATE STATE Message (if required) given RECORDS
	/////////////////////////////////////////////////////////////
	if lib.BookmarkSet(config) {
		if reflect.DeepEqual(*config.Records.PrimaryBookmarkPath, []string{"*"}) {
			lib.UpdateDetectionBookmark(records, config)
		} else {
			lib.UpdateBookmark(records, config)
		}
		lib.GenerateStateMessage()
	}

}
